[project]
name = "holobench"
version = "1.30.0"

authors = [{ name = "Austin Gregg-Smith", email = "blooop@gmail.com" }]
description = "A package for benchmarking the performance of arbitrary functions"
readme = "README.md"
license = "MIT"

dependencies = [
  "holoviews>=1.15,<=1.19.1",
  "numpy>=1.0,<=2.1.0",
  "param>=1.13.0,<=2.1.1",
  "hvplot>=0.8,<=0.10.0",
  "matplotlib>=3.6.3,<=3.9.2",
  "panel>=1.3.6,<=1.4.5",
  "diskcache>=5.6,<=5.6.3",
  "optuna>=3.2,<=4.0.0",
  "xarray>=2023.7,<=2024.7.0",
  "plotly>=5.15,<=5.24.0",
  "sortedcontainers>=2.4,<=2.4",
  "pandas>=2.0,<=2.2.2",
  "strenum>=0.4.0,<=0.4.15",
  "scikit-learn>=1.2,<=1.5.1",
  "str2bool>=1.1,<=1.1",
  "scoop>=0.7.0,<=0.7.2.0",
  "moviepy-fix-codec",
]

[project.urls]
Repository = "https://github.com/dyson-ai/bencher"
Home = "https://github.com/dyson-ai/bencher"
Documentation = "https://bencher.readthedocs.io/en/latest/"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.dependencies]
python = ">=3.10"


[tool.pixi.feature.py310.dependencies]
python = "3.10.*"
[tool.pixi.feature.py311.dependencies]
python = "3.11.*"
[tool.pixi.feature.py312.dependencies]
python = "3.12.*"


[tool.pixi.pypi-dependencies]
holobench = { path = ".", editable = true }

[project.optional-dependencies]
test = [
  "black>=23,<=24.10.0",
  "pylint>=3.2.5,<=3.3.1",
  "pytest-cov>=4.1,<=5.0.0",
  "pytest>=7.4,<=8.3.3",
  "hypothesis>=6.104.2,<=6.115.2",
  "ruff>=0.5.0,<=0.6.9",
  "coverage>=7.5.4,<=7.6.3",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = ["bencher"]

# Environments
[tool.pixi.environments]
default = { features = ["test"], solve-group = "default" }
py310 = ["py310", "test"]
py311 = ["py311", "test"]
py312 = ["py312", "test"]


[tool.pixi.tasks]
success = "echo Success"
format = "black ."
check-clean-workspace = "git diff --exit-code"
ruff-lint = "ruff check . --fix"
pylint = "pylint --version && echo 'running pylint...' && pylint $(git ls-files '*.py')"
lint = { depends_on = ["ruff-lint", "pylint"] }
style = { depends_on = ["format", "lint"] }
commit-format = "git commit -a -m'autoformat code' || true"
test = "pytest"
coverage = "coverage run -m pytest && coverage xml -o coverage.xml"
coverage-report = "coverage report -m"
update-lock = "pixi update && git commit -a -m'update pixi.lock' || true"
push = "git push"
update-lock-push = { depends_on = ["update-lock", "push"] }
fix = { depends_on = ["update-lock", "format", "ruff-lint"] }
fix-commit-push = { depends_on = ["fix", "commit-format", "update-lock-push"] }
ci-no-cover = { depends_on = ["style", "test"] }
ci = { depends_on = [
  "format",
  "ruff-lint",
  "check-clean-workspace",
  "pylint",
  "coverage",
  "coverage-report",
] }
ci-push = { depends_on = ["format", "ruff-lint", "update-lock", "ci", "push"] }
clear-pixi = "rm -rf .pixi pixi.lock"
setup-git-merge-driver = "git config merge.ours.driver true"
update-from-template-repo = "./scripts/update_from_template.sh"

#demos
demo = "python3 bencher/example/example_image.py"

[tool.pylint]
extension-pkg-whitelist = ["numpy", "scipy"]
jobs = 16                                    #detect number of cores

[tool.pylint.'MESSAGES CONTROL']
disable = "C,logging-fstring-interpolation,line-too-long,fixme,missing-module-docstring,too-many-instance-attributes,too-few-public-methods,too-many-arguments,too-many-locals,too-many-branches,too-many-statements,use-dict-literal,duplicate-code,too-many-public-methods,too-many-nested-blocks,cyclic-import, too-many-positional-arguments"
enable = "no-else-return,consider-using-in"

[tool.black]
line-length = 100

[tool.ruff]
line-length = 100 # Same as Black.

target-version = "py310"

[tool.ruff.lint]
# Never enforce `E501` (line length violations).
#"F841" will auto remove unused variables which is annoying during development, pylint catches this anyway
ignore = ["E501", "E902", "F841"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]


[tool.coverage.run]
omit = ["*/test/*", "__init__.py"]

[tool.coverage.report]
exclude_also = [
  "def __repr__",
  "if False:",
  "if 0:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "pass",
  "(_):",
]
