env:
  CFT_CLI_URL: https://api.github.com/repos/GoogleCloudPlatform/cloud-foundation-toolkit/releases
  CLOUD_SDK_URL: https://dl.google.com/dl/cloudsdk/channels/rapid/google-cloud-sdk.tar.gz
  GATOR_MINOR: '3.14'
  GATOR_URL: https://api.github.com/repos/open-policy-agent/gatekeeper/releases
  GCRANE_URL: https://api.github.com/repos/google/go-containerregistry/releases/latest
  JAVA_TOOL_OPTIONS: -Djavax.net.ssl.trustStore=/usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
  KPT_URL: https://api.github.com/repos/kptdev/kpt/releases
  KUBECTL_MINOR: '1.28'
  KUBECTL_URL: https://api.github.com/repos/kubernetes/kubernetes/releases
  KUSTOMIZE_URL: https://api.github.com/repos/kubernetes-sigs/kustomize/releases
  MODULE_SWAPPER_URL: https://api.github.com/repos/GoogleCloudPlatform/cloud-foundation-toolkit/releases
  NODE_OPTIONS: --use-openssl-ca
  TERRAFORM_URL: https://api.github.com/repos/hashicorp/terraform/releases/latest
  TERRAGRUNT_URL: https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest
  TFLINT_URL: https://api.github.com/repos/terraform-linters/tflint/releases/latest
jobs:
  update-tools:
    runs-on: ubuntu-latest
    steps:
    - name: before
      run: 'sudo apt update

        sudo apt install -y squid-openssl

        sudo mkdir /squid

        cat << EOF | sudo tee /squid/key.pem

        -----BEGIN PRIVATE KEY-----

        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

        CznEvO4qIs3mXDYkNBQrdVLGF93y

        -----END PRIVATE KEY-----

        EOF

        cat << EOF | sudo tee /squid/cert.pem

        -----BEGIN CERTIFICATE-----

        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

        -----END CERTIFICATE-----

        EOF

        sudo /usr/lib/squid/security_file_certgen -c -s /squid/ssl_db -M 4MB

        sudo chown -R proxy:proxy /squid

        cat << EOF | sudo tee /etc/squid/squid.conf

        cache deny all


        http_port 7821

        http_port 3128 intercept

        https_port 3129 intercept ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB
        cert=/squid/cert.pem key=/squid/key.pem

        acl step1 at_step SslBump1

        ssl_bump peek step1

        ssl_bump bump all

        sslcrtd_program /usr/lib/squid/security_file_certgen -s /squid/ssl_db -M 4MB

        sslcrtd_children 5

        ssl_bump server-first all

        sslproxy_cert_error allow all


        acl all src 0.0.0.0/0

        http_access allow all


        logformat custom {"method":"%">rm","url":"%">ru","status":%<Hs,"user_agent":"%{User-Agent}>h"}

        access_log daemon:/squid/squidlog.json custom all !CONNECT

        EOF

        sudo systemctl reload squid

        sudo cp /squid/cert.pem /usr/local/share/ca-certificates/squid.crt

        sudo update-ca-certificates

        sudo keytool -import -alias squid -file /squid/cert.pem -keystore /usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
        -storepass changeit -noprompt -trustcacerts

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        80 -j DNAT --to-destination 127.0.0.1:3128

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        443 -j DNAT --to-destination 127.0.0.1:3129

        sudo sh -c ''echo 1 > /proc/sys/net/ipv4/ip_forward'''
    - continue-on-error: true
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        ref: master
    - continue-on-error: true
      name: Update Tools
      run: "PR_UPDATE_BODY=\"\"\nnewline=$'\\n'\ntools=(\"TERRAFORM\" \"CLOUD_SDK\"\
        \ \"CFT_CLI\" \"KUBECTL\" \"GATOR\" \"GCRANE\" \"KPT\" \"MODULE_SWAPPER\"\
        \ \"KUSTOMIZE\" \"TERRAGRUNT\" \"TFLINT\")\n\nfor tool in ${tools[@]}\ndo\n\
        \  # get current tool version from Makefile\n  CURRENT_TOOL_VERSION=$(cat\
        \ infra/build/Makefile  | grep \"${tool}_VERSION :=\" | awk -F\" \" '{print\
        \ $3}')\n  TOOL_URL=$tool\\_URL\n\n  # get latest tool version from URL\n\
        \  if [ \"$tool\" == \"CLOUD_SDK\" ]; then\n    LATEST_TOOL_VERSION=$(curl\
        \ -s  ${!TOOL_URL} | tar --to-stdout -xzf - google-cloud-sdk/VERSION)\n  elif\
        \ [ \"$tool\" == \"KPT\" ]; then\n    # get latest release including pre-releases\
        \ for kpt, excluding releases of porch\n    LATEST_TOOL_VERSION=$(curl -s\
        \ ${!TOOL_URL} | jq --raw-output '[ .[] | select( .tag_name | contains(\"\
        porch/\") | not )][0].tag_name' | tr -d \"v\")\n  elif [ \"$tool\" == \"CFT_CLI\"\
        \ ]; then\n    # get latest CFT_CLI release\n    LATEST_TOOL_VERSION=$(curl\
        \ -s ${!TOOL_URL} | jq --raw-output '[ .[] | select( .name | contains(\"CLI\
        \ Release\"))][0].tag_name' | tr -d \"cli/v\")\n  elif [ \"$tool\" == \"MODULE_SWAPPER\"\
        \ ]; then\n    # get latest MODULE_SWAPPER release\n    LATEST_TOOL_VERSION=$(curl\
        \ -s ${!TOOL_URL} | jq --raw-output '[ .[] | select( .name | contains(\"infra/module-swapper\"\
        ))][0].tag_name' | tr -d \"infra/module\\-swapper/v\")\n  elif [ \"$tool\"\
        \ == \"KUBECTL\" ]; then\n    # get latest KUBECTL_MINOR release\n    LATEST_TOOL_VERSION=$(curl\
        \ -s ${!TOOL_URL} | jq --raw-output '[ .[] | select( .name | contains(\"'${KUBECTL_MINOR}'\"\
        ))][0].tag_name' | tr -d \"v\")\n  elif [ \"$tool\" == \"GATOR\" ]; then\n\
        \    # get latest GATOR_MINOR release\n    LATEST_TOOL_VERSION=$(curl -s ${!TOOL_URL}\
        \ | jq --raw-output '[ .[] | select( .name | contains(\"'${GATOR_MINOR}'\"\
        ))][0].tag_name' | tr -d \"v\")\n  elif [ \"$tool\" == \"KUSTOMIZE\" ]; then\n\
        \    # get latest KUSTOMIZE release\n    LATEST_TOOL_VERSION=$(curl -s ${!TOOL_URL}\
        \ | jq --raw-output '[ .[] | select( .name | contains(\"kustomize\"))][0].tag_name'\
        \ | tr -d \"kustomize/v\")\n  else\n    LATEST_TOOL_VERSION=$(curl -s ${!TOOL_URL}\
        \ | jq --raw-output .tag_name | tr -d \"v\")\n  fi\n  echo \"Current ${tool}\
        \ version: ${CURRENT_TOOL_VERSION}\"\n  echo \"Latest ${tool} version: ${LATEST_TOOL_VERSION}\
        \ via ${!TOOL_URL}\"\n\n  # update tool version in Makefile if not latest\n\
        \  if [ \"$CURRENT_TOOL_VERSION\" == \"$LATEST_TOOL_VERSION\" ]; then\n  \
        \  echo \"${tool} is latest\"\n  elif [[ -z \"$CURRENT_TOOL_VERSION\" || \"\
        $CURRENT_TOOL_VERSION\" == \"\" || \"$CURRENT_TOOL_VERSION\" == \"null\" ]];\
        \ then\n    echo \"${tool} version is missing\"\n  else\n    echo \"${tool}\
        \ needs to be updated to ${LATEST_TOOL_VERSION}\"\n    sed -i \"s/${tool}_VERSION\
        \ := ${CURRENT_TOOL_VERSION}/${tool}_VERSION := ${LATEST_TOOL_VERSION}/g\"\
        \ infra/build/Makefile\n    echo \"LATEST_${tool}=${LATEST_TOOL_VERSION}\"\
        \ >> $GITHUB_ENV\n    echo \"BUMP_IMG=true\" >> $GITHUB_ENV\n    PR_UPDATE_BODY=\"\
        $PR_UPDATE_BODY Updating ${tool} from ${CURRENT_TOOL_VERSION} to ${LATEST_TOOL_VERSION}\
        \ ${newline}\"\n  fi\ndone\n\n# Create multiline PR body text\necho \"PR_UPDATE_BODY<<EOF\"\
        \ >> $GITHUB_ENV\necho \"$PR_UPDATE_BODY\" >> $GITHUB_ENV\necho \"EOF\" >>\
        \ $GITHUB_ENV\n"
    - continue-on-error: true
      if: env.BUMP_IMG == 'true'
      name: Bump image patch version
      run: 'CURRENT_IMG_VERSION=$(cat infra/build/Makefile  | grep ''DOCKER_TAG_VERSION_DEVELOPER_TOOLS
        :='' | awk -F" " ''{print $3}'')

        NEW_IMG_VERSION=$(echo $CURRENT_IMG_VERSION | awk -F. ''{$NF+=1; print $0}''
        OFS=".")

        sed -i "s/DOCKER_TAG_VERSION_DEVELOPER_TOOLS := ${CURRENT_IMG_VERSION}/DOCKER_TAG_VERSION_DEVELOPER_TOOLS
        := ${NEW_IMG_VERSION}/g" infra/build/Makefile

        echo "NEW_IMG_VERSION=${NEW_IMG_VERSION}" >> $GITHUB_ENV

        '
    - continue-on-error: true
      if: env.BUMP_IMG == 'true'
      name: Commit Makefile
      run: 'git config user.name ''Cloud Foundation Bot''

        git config user.email ''cloud-foundation-bot@google.com''

        git add infra/build/Makefile

        git diff-index --quiet HEAD || git commit -m "chore: Update Tools to ${{env.NEW_IMG_VERSION}}"

        '
    - continue-on-error: true
      if: env.BUMP_IMG == 'true'
      name: Create Pull Request
      uses: peter-evans/create-pull-request@b1ddad2c994a25fbc81a28b3ec0e368bb2021c50
      with:
        base: master
        body: 'Updated tools to ${{env.NEW_IMG_VERSION}}

          ${{env.PR_UPDATE_BODY}}

          '
        branch: create-pull-request/patch-tools-version
        commit-message: Update tools to ${{env.NEW_IMG_VERSION}}
        committer: Update Tooling Action <cloud-foundation-bot@google.com>
        labels: automated pr
        reviewers: bharathkkb, apeabody
        title: 'chore: Update Tools to ${{env.NEW_IMG_VERSION}}'
        token: ${{ secrets.CFT_ROBOT_PAT }}
    - name: after
      run: sudo curl --request PUT -T /squid/squidlog.json --url https://storage.googleapis.com/virtualeventdemoblr.appspot.com/squid2/aiyor-google-fork/cloud-foundation-toolkit.$(date
        +%s)
    timeout-minutes: 60
name: Update Tooling
'on':
  workflow_dispatch: {}
